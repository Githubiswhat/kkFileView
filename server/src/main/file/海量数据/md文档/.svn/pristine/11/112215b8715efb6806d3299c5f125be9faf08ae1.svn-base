# 分区表概述

## 功能描述

Vastbase数据库支持的分区表：Range分区表、List分区表、Hash分区表和system分区表。

- Range分区表：范围分区根据您为每个分区建立的分区键值的范围将数据映射到分区。这种分区方式是最常见的，并且分区键值经常采用日期，例如将销售数据按照月份进行分区。

- List分区表：将数据中包含的键值分别存储在不同的分区中，依次将数据映射到每一个分区，分区中包含的键值由创建分区表时指定，键值最多不超过127个。

- Hash分区表：将数据根据内部哈希算法依次映射到每一个分区中，包含的分区个数由创建分区表时指定。

- system分区表：系统分区可以对没有分区键的表进行分区。创建分区时可以指定分区名称，也可以不指定分区名称，由系统自动分配。

  分区表和普通表相比具有以下优点：

  - 改善查询性能：对分区对象的查询可以仅搜索自己关心的分区，提高检索效率。
  - 增强可用性：如果分区表的某个分区出现故障，表在其他分区的数据仍然可用。
  - 方便维护：如果分区表的某个分区出现故障，需要修复数据，只修复该分区即可。
  - 均衡I/O：可以把不同的分区映射到不同的磁盘以平衡I/O，改善整个系统性能。

## 语法格式

创建分区表、修改表分区（增删分区、切割分区、合成分区、交换分区、以及修改分区属性等）的语法格式和参数说明请参考[CREATE TABLE PARTITION](CREATE-TABLE-PARTITION.md)、[ALTER TABLE PARTITION](ALTER-TABLE-PARTITION.md)。

## 参数说明

无。

## 注意事项

- 普通表若要转成分区表，需要新建分区表，然后把普通表中的数据导入到新建的分区表中。因此在初始设计表时，请根据业务提前规划是否使用分区表。
- Hash分区只支持1个分区键，分区键值能用表的普通字段来指定，分区范围的值只支持常量表达式、数值或字符串常量，不支持新增和删除分区。
- system分区表仅在数据库兼容模式为Oracle时有效（即创建DB时DBCOMPATIBILITY='A'），在其他数据库兼容模式下不能使用该特性。
- system分区表暂不支持二级分区、组合分区。
- 暂不支持对列存表、MOT表进行分区操作。
- 交换分区的普通表，必须与分区表的字段个数、字段类型都完全一致时才可以进行exchange操作，且普通表不能是临时表。（支持增删列之后的表进行分区交换。）

## 示例

**示例1：** 按照以下方式对Range分区表进行操作。

1、创建分区表。

```sql
 CREATE TABLE customer_address 
( 
    ca_address_sk       integer                  NOT NULL   , 
    ca_address_id       character(16)            NOT NULL   , 
    ca_street_number    character(10)                       , 
    ca_street_name      character varying(60)               , 
    ca_street_type      character(15)                       , 
    ca_suite_number     character(10)                       , 
    ca_city             character varying(60)               , 
    ca_county           character varying(30)               , 
    ca_state            character(2)                        , 
    ca_zip              character(10)                       , 
    ca_country           character varying(20)               , 
    ca_gmt_offset       numeric(5,2)                        , 
    ca_location_type    character(20) 
) 
TABLESPACE example1 
PARTITION BY RANGE (ca_address_sk) 
( 
        PARTITION P1 VALUES LESS THAN(5000), 
        PARTITION P2 VALUES LESS THAN(10000), 
        PARTITION P3 VALUES LESS THAN(15000), 
        PARTITION P4 VALUES LESS THAN(20000), 
        PARTITION P5 VALUES LESS THAN(25000), 
        PARTITION P6 VALUES LESS THAN(30000), 
        PARTITION P7 VALUES LESS THAN(40000), 
        PARTITION P8 VALUES LESS THAN(MAXVALUE)
TABLESPACE example2 
) 
ENABLE ROW MOVEMENT;
```

当结果显示为如下信息，则表示创建成功:

```sq
CREATE TABLE
```

创建列存分区表的数量建议不超过1000个。

2、插入数据。

将表customer_address的数据插入到表web_returns_p2中。

例如在数据库中创建了一个表customer_address的备份表tpcds.web_returns_p2，现在需要将表tpcds.customer_address中的数据插入到表tpcds.web_returns_p2中，则可以执行如下命令。

创建备份表web_returns_p2并插入数据。

```sql
CREATE TABLE web_returns_p2 
( 
    ca_address_sk       integer                  NOT NULL   , 
    ca_address_id       character(16)            NOT NULL   , 
    ca_street_number    character(10)                       , 
    ca_street_name      character varying(60)               , 
    ca_street_type      character(15)                       , 
    ca_suite_number     character(10)                       , 
    ca_city             character varying(60)               , 
    ca_county           character varying(30)               , 
    ca_state            character(2)                        , 
    ca_zip              character(10)                       , 
    ca_country           character varying(20)               , 
    ca_gmt_offset       numeric(5,2)                        , 
    ca_location_type    character(20) 
) 
TABLESPACE example1 
PARTITION BY RANGE (ca_address_sk) 
( 
        PARTITION P1 VALUES LESS THAN(5000), 
        PARTITION P2 VALUES LESS THAN(10000), 
        PARTITION P3 VALUES LESS THAN(15000), 
        PARTITION P4 VALUES LESS THAN(20000), 
        PARTITION P5 VALUES LESS THAN(25000), 
        PARTITION P6 VALUES LESS THAN(30000), 
        PARTITION P7 VALUES LESS THAN(40000), 
        PARTITION P8 VALUES LESS THAN(MAXVALUE) TABLESPACE example2 
) 
ENABLE ROW MOVEMENT; 

INSERT INTO web_returns_p2 SELECT * FROM customer_address; 
```

3、重命名分区。

```sql
ALTER TABLE web_returns_p2 RENAME PARTITION P8 TO P_9; 
ALTER TABLE web_returns_p2 RENAME PARTITION FOR (40000) TO P8; 
```

4、查询分区P6。

```sql
 SELECT * FROM web_returns_p2 PARTITION (P6); 
SELECT * FROM web_returns_p2 PARTITION FOR (35888);
```

5、删除分区表和表空间。

```sql
 DROP TABLE web_returns_p2; 
DROP TABLE customer_address; 
```

**示例2：** 按照以下方式对Hash分区表进行操作。

创建分区表（ Hash分区只支持1个分区键，分区键值能用表的普通字段来指定，分区范围的值只支持常量表达式、数值或字符串常量，不支持新增和删除分区。） 语法形式如下：

```sql
CREATE TABLE [IF NOT EXISTS] table_name
…
PARTITION BY HASH (columns_name)
hash_partition_desc
…
```

1、创建分区表。

```sql
CREATE TABLE t_hash_1
 (c1 integer,
c2 date,
c3 text)
PARTITION BY HASH (c1)
(
PARTITION t_hash_p1,
PARTITION t_hash_p2
);
```

2、插入数据并查询结果。

```sql
insert into t_hash_1 values(1,'2020-07-29','a');
SELECT * FROM t_hash_1 PARTITION (t_hash_p1);
```

返回结果为：

```sql
c1 |         c2          | c3
----+---------------------+----
  1 | 2020-07-29 00:00:00 | a
(1 row)
```

3、更新数据并查询结果。

```sql
UPDATE t_hash_1 set c1=3 where c1=1;
SELECT * FROM t_hash_1 PARTITION (t_hash_p2);
```

返回结果为：

```sql
 c1 |         c2          | c3
----+---------------------+----
  3 | 2020-07-29 00:00:00 | a
(1 row)
```

4、删除数据并查询结果。

```sql
DELETE t_hash_1 where c1=3;
SELECT * FROM t_hash_1;
```

返回结果为：

```sql
c1 | c2 | c3
----+----+----
(0 rows)
```

**示例3：** 按照以下方式对List分区表进行操作。

1、创建分区表。

```sql
CREATE TABLE t_list
(c1 integer,
c2 date,
c3 text)
PARTITION BY LIST (c2)
(
PARTITION p1 VALUES ('2019-10-12'),
PARTITION p2 VALUES ('2019-10-13'),
PARTITION p3 VALUES ('2019-10-14')
);
```

2、修改分区表行迁移属性。

```sql
alter table t_list enable row movement;
```

3、新增分区。

```sql
ALTER TABLE t_list ADD PARTITION P4 VALUES ('2019-10-15');
```

4、删除分区。

```sql
ALTER TABLE t_list DROP PARTITION p4;
```

5、插入数据并查询结果。

```sql
insert into t_list values(1,'2019-10-13','test');
SELECT * FROM t_list PARTITION (p2);
```

返回结果为：

```sql
 c1 |         c2          |  c3  
----+---------------------+------
  1 | 2019-10-13 00:00:00 | test
(1 row)
```

查看其它的分区：

```sql
SELECT * FROM t_list PARTITION (p1);
```

返回结果为：

```sql
 c1 | c2 | c3 
----+----+----
(0 rows)
```

6、更新数据并查询结果。

```sql
update t_list set c2='2019-10-12' where c1=1;
SELECT * FROM t_list PARTITION (p2);
```

返回结果为：

```sql
 c1 | c2 | c3 
----+----+----
(0 rows)
SELECT * FROM t_list PARTITION (p1);
```

返回结果为：

```sql
 c1 |         c2          |  c3  
----+---------------------+------
  1 | 2019-10-12 00:00:00 | test
(1 row)
```

**示例4：** 按照以下方式对system分区表进行操作。

1、创建分区表（指定分区名称），并向其中插入数据。

```sql
create table system_par_tab(
c1 integer,
c2 date,
c3 text
)
partition by system
(
partition part_1,
partition part_2,
partition part_3
);
```

2、创建分区表（系统自动分配分区名称），并向其中插入数据。

```sql
create table system_par_tab2(
id number,
code varchar2(10),
description varchar2(50)
)
partition by system;
```

3、查询系统自动生成的分区名称。

查询系统表pg_partition。

```sql
\d+ system_par_tab2
select relname,parentid,partstrategy from pg_partition where relname='system_par_tab2';
```

返回结果为：

```sql
     relname     | parentid | partstrategy
-----------------+----------+--------------
 system_par_tab2 |    16707 | h
 system_par_tab2 |    16707 | s
(2 rows)
```

获取上面的parentid进行查询。

```sql
select * from pg_partition where parentid='16707';
```

返回结果为：

```sql
     relname     | parttype | parentid | partitionid | rangenum | intervalnum | partstrategy | subpartstrategy | r
elfilenode | reltablespace | relpages | reltuples | relallvisible | reltoastrelid | reltoastidxid | indextblid | i
ndisusable | reldeltarelid | reldeltaidx | relcudescrelid | relcudescidx | relfrozenxid | intspnum | partkey | sub
partkey | intervaltablespace | interval | boundaries | transit |                           reloptions
               | subparttemplate | relfrozenxid64 | relminmxid
-----------------+----------+----------+-------------+----------+-------------+--------------+-----------------+--
-----------+---------------+----------+-----------+---------------+---------------+---------------+------------+--
-----------+---------------+-------------+----------------+--------------+--------------+----------+---------+----
--------+--------------------+----------+------------+---------+--------------------------------------------------
---------------+-----------------+----------------+------------
 system_par_tab2 | r        |    16707 |           0 |        0 |           0 | s            | n               |
         0 |             0 |        0 |         0 |             0 |             0 |             0 |          0 | t
           |             0 |           0 |              0 |            0 | 0            |          |         |
        |                    |          |            |         | {orientation=row,compression=no,fillfactor=80,wai
t_clean_gpi=n} |                 |              0 |          0
 system_par_tab2 | p        |    16707 |           0 |        0 |           0 | h            | n               |
     16711 |             0 |        0 |         0 |             0 |         16712 |             0 |          0 | t
           |             0 |           0 |              0 |            0 | 14918        |          |         |
        |                    |          |            |         | {orientation=row,compression=no,fillfactor=80}
               |                 |          14918 |          2
(2 rows)
```

其中system_par_tab2 就是系统自动生成的分区名。

4、向分区表中插入数据。

```sql
insert into system_par_tab partition(part_1) values(1,'2022-01-01','p1');
insert into system_par_tab partition(part_2) values(2,'2022-02-01','p2');
insert into system_par_tab partition(part_3) values(3,'2022-03-01','p3');
```

> <div align="left"><img src="image/img1.png" style="zoom:75%"></div>
>
> 向一个system分区表中插入数据时必须指定其分区名称。

5、查询分区表。

```sql
select * from system_par_tab;
```

返回结果为：

```sql
 c1 |         c2          | c3
----+---------------------+----
  1 | 2022-01-01 00:00:00 | p1
  2 | 2022-02-01 00:00:00 | p2
  3 | 2022-03-01 00:00:00 | p3
 (3rows)
```

6、更新数据。

```sql
update system_par_tab partition(part_2) set c3='p5' where c1 ='2';
```

7、新增分区。

```sql
alter table system_par_tab add partition part_4;
```

8、删除分区。

```sql
alter table system_par_tab drop partition part_4;
```

9、清空分区表。

```sql
truncate table system_par_tab2;
```

10、清空指定分区.

```sql
alter table system_par_tab truncate partition part_1;
```

**示例5：** system分区交换。

1、创建分区表并插入数据。

```sql
create table system_par3
(c1 integer,
c2 date,
c3 text)
partition by system
(
partition p1,
partition p2,
partition p3
);
insert into system_par3 partition(p1) values(1,'2022-01-01','p1');
insert into system_par3 partition(p2) values(2,'2022-02-01','p2');
insert into system_par3 partition(p3) values(3,'2022-03-01','p3');
```

2、创建普通表并插入数据。

```sql
create table system_part
(c1 integer,
c2 date,
c3 text);
insert into system_part values(4,'2022-04-01','p2');
insert into system_part values(5,'2022-05-01','p2');
```

3、交换分区。

```sql
alter table system_par3 exchange partition p2 with table system_part;
```

4、查看交换结果。

```sql
select * from system_par3;
```

返回结果为：

```sql
 c1 |         c2          | c3
----+---------------------+----
  1 | 2022-01-01 00:00:00 | p1
  4 | 2022-04-01 00:00:00 | p2
  5 | 2022-05-01 00:00:00 | p2
  3 | 2022-03-01 00:00:00 | p3
(4 rows)
select * from system_par3 partition(p2);
```

返回结果为：

```sql
 c1 |         c2          | c3
----+---------------------+----
  4 | 2022-04-01 00:00:00 | p2
  5 | 2022-05-01 00:00:00 | p2
(2 rows)
select * from system_part;
select * from system_part;
```

返回结果为：

```sql
 c1 |         c2          | c3
----+---------------------+----
  2 | 2022-02-01 00:00:00 | p2
(1 row)
```

> <div align="left"><img src="image/img1.png" style="zoom:75%"></div>
>
> 交换分区的普通表，必须与分区表的字段个数、字段类型都完全一致时才可以进行exchange操作，且普通表不能是临时表。

