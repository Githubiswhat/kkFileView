#### 自治事务

**功能描述**

自治事务为在主事务执行过程中，以独立的事务上下文执行指定的某一类SQL语句，在定义函数/存储过程中，在函数/存储过程的声明部分增加指令：PRAGMA AUTONOMOUS_TRANSACTION，来控制对当前的存储过程中的内部事务，能够独立提交，其commit和rollback不受主事务commit和rollback的影响。该执行方式与普通方式执行函数/存储过程的结果相同。

典型使用场景是，用一个表记录主事务执行过程中的操作信息，并且在主事务失败回退的时候，表中记录的操作信息不予回退。

**功能特性**

- 支持输入参数
- 支持嵌套调用
- 支持在触发器中使用自治事务
- 支持匿名块使用自治事务

**注意事项**

- 不支持集合作为返回值
- 不支持组合类型作为返回类型
- 不支持out参数

**示例**

- 创建测试表。

```
create table at_tb2(id int, val varchar(64));
```

- 支持声明为自治事务的存储过程。

1、创建存储过程

```
create or replace procedure at_test3(i int)
AS
DECLARE
 PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
 insert into at_tb2 values(1, 'before s1');
 insert into at_tb2 values(2, 'after s1');
 if i > 10 then
 rollback;
 else
 commit;
 end if;
end;
/
```

如果数据库未开启默认自动提交，则需要手动提交。

```
commit;  
```

2、调用存储过程。

```
call at_test3(6);
```

3、查询结果。

```
select * from at_tb2;
```

 当结果显示如下信息，则说明写入成功。

```
id |   val
----+-----------
 1 | before s1
 2 | after s1
(2 rows)
```



- 支持plpgsql块内的sql语句使用函数/存储过程参数和定义的变量

1、创建存储过程。

```
create or replace procedure at_proc(i int)
as
declare
strval varchar;
pragma autonomous_transaction;
begin
strval:= 'begin:insert by autonomous transaction procedure<at_proc>';
insert into at_tb2 values(i,strval);
commit;
end;
/
```

如果数据库未开启默认自动提交，则需要手动提交。

```
 commit; 
```

2、调用存储过程。

```
call at_proc(1);
```

3、查询结果。

```
select * from at_tb2;
```

当结果显示如下信息，则说明验证成功。

```
id |   val
----+-----------
 1 | before s1
 2 | after s1
 3 | begin:insert by autonomous transaction procedure<at_proc>
(3 rows)
```



- 支持在触发器函数内声明自治事务


1、创建源表及触发表。

```
create table test_trigger_src_tbl(id1 int, id2 int, id3 int);
create table test_trigger_des_tbl(id1 int, id2 int, id3 int);
```

2、创建触发器函数。

```
create or replace function tri_insert_func() returns trigger as
$$
declare
pragma autonomous_transaction;
begin
insert into test_trigger_des_tbl values(new.id1, new.id2, new.id3);
return new;
end
$$ language plpgsql;
```

3、创建insert触发器。

```
create trigger insert_trigger
before insert on test_trigger_src_tbl
for each row
execute procedure tri_insert_func();
```

4、执行insert触发事件。

```
insert into test_trigger_src_tbl values(100,200,300);
```

5、检查触发结果。

```
select * from test_trigger_src_tbl;
```

结果显示如下：

```
 id1 | id2 | id3 
-----+-----+-----
 100 | 200 | 300
(1 row)
```

6、查看触发操作是否生效。

```
select * from test_trigger_des_tbl; 
```

结果显示如下：

```
 id1 | id2 | id3 
-----+-----+-----
 100 | 200 | 300
(1 row)
```

- 支持在匿名块内声明自治事务


1、清空测试表数据。

```
truncate at_tb2;
```

2、匿名块声明自治事务。

```
declare
pragma autonomous_transaction;
strval varchar;
begin strval:='insert by autonomous transaction by anonymous block';
insert into at_tb2 values(1,strval);
commit;
end;
/
```

3、查询结果。

```
select * from at_tb2;
```

结果显示如下：

```
id |               val
1 | insert by autonomous transaction by anonymous block
(1 row)
```



- 支持自治事务嵌套使用

1、创建嵌套自治事务的存储过程。

```
create or replace procedure at_proc_inner(i int)
as
declare
pragma autonomous_transaction;
begin
insert into at_tb2 values(1,'insert by autonomous transaction procedure<at_proc_inner>');
if i>5 then
rollback;
else
commit;
end if;
end;
/
```

```
create or replace procedure at_proc_outer(i int)
as
declare
pragma autonomous_transaction;
begin
insert into at_tb2 values(1,'insert by autonomous transaction procedure<at_proc_outer>');
at_proc_inner(i);
if i>10 then rollback;
else
commit;
end if;
end;
/
```

2、调用存储过程。

- (1)

```
truncate at_tb2;
call at_proc_outer(11);
```

验证结果：

```
select * from at_tb2;
```

结果显示如下：

```
----+-----
(0 rows)
```

- (2)

```
truncate at_tb2;
call at_proc_outer(8);
```

验证结果：

```
select * from at_tb2;
```

结果返回如下：

```
 id |                            val                            
----+-----------------------------------------------------------
  1 | insert by autonomous transaction procedure<at_proc_outer>
```

- (3)

```
truncate at_tb2;
call at_proc_outer(2);
```

验证结果：

```
select * from at_tb2;
```

结果返回如下：

```
 id |                            val                            
----+-----------------------------------------------------------
  1 | insert by autonomous transaction procedure<at_proc_outer>
  1 | insert by autonomous transaction procedure<at_proc_inner>
(2 rows)
```

